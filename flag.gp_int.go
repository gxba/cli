///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/gxlb/gogp]
// Last update at: [Sat Feb 20 2021 16:19 CST]
// Generate from:
//   [github.com/gxlb/cli/internal/gp/flag.gp]
//   [github.com/gxlb/cli/flag.gpg] [flag_int]
//
// Tool [github.com/gxlb/gogp] info:
// CopyRight 2021 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Site    : https://github.com/vipally
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////

package cli

import (
	"flag"
	"fmt"
)

// IntFlag define a value of type int
type IntFlag struct {
	////////////////////////////////////////////////////////////////////////////
	//
	//name related area
	//
	LogicName string   // logic name of the flag
	Name      string   // name of the flag
	Aliases   []string // aliases of the flag
	Usage     string   // usage string
	Required  bool     // if required
	Hidden    bool     // hidden this flag
	EnvVars   []string // environment values
	FilePath  string   // file path
	//
	//value related area
	//
	Target      *int   // Target value pointer outside
	Default     int    // Default value
	DefaultText string // Default value in help info
	Enums       []int  // Enumeration of valid values
	Ranges      []int  // {[min,max),[min,max),[min...)} ranges of valid values

	////////////////////////////////////////////////////////////////////////////
	//area for parsing
	value int      // value that affect by flagset
	info  FlagInfo // parsed info of this flag
}

// Init verify and init the value by ower flag
func (v *IntFlag) Init() error {
	v.info.Flag = v
	if l := len(v.Enums); l > maxSliceLen {
		return fmt.Errorf("flag %s.Enums too long: %d/%d", v.info.LogicName, l, maxSliceLen)
	}
	if l := len(v.Ranges); l > maxSliceLen {
		return fmt.Errorf("flag %s.Ranges too long: %d/%d", v.info.LogicName, l, maxSliceLen)
	}
	if err := v.validateValues(v.Default); err != nil {
		return fmt.Errorf("default value invalid: %s", err.Error())
	}
	return nil
}

// IsSet check if value was set
func (v *IntFlag) IsSet() bool {
	return v.info.HasBeenSet
}

// Apply coordinate the value to flagset
func (v *IntFlag) Apply(set *flag.FlagSet) error {
	return nil
}

// String return the value for view
func (v *IntFlag) String() string {
	return ""
}

// ValidateValues verify if all values was valid
func (v *IntFlag) ValidateValues() error {
	return v.validateValues(v.value)
}

// Info returns parsed info of this flag
func (v *IntFlag) Info() *FlagInfo {
	return &v.info
}

// for default value verify
func (v *IntFlag) validateValues(values int) error {
	return v.validValue(values)
}

// check if value if valid for this flag
func (v *IntFlag) validValue(value int) error {
	f := &v.info
	if len(v.Enums) > 0 {
		found := false
		for _, v := range v.Enums {
			if value == v {
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("flag %s value %v out of Enums: %v", f.LogicName, value, v.Enums)
		}
	}
	if len(v.Ranges) > 0 {
		found := false
		for i := 0; i < len(v.Ranges); i++ {
			min := v.Ranges[i]
			max := min
			if i++; i < len(v.Ranges) {
				max = v.Ranges[i]
			}
			if value >= min && value < max {
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("flag %s value %v out of Ranges: %v", f.LogicName, value, v.Enums)
		}
	}
	return nil
}

var _ Flag = (*IntFlag)(nil) //for interface verification only
