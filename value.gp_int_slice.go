///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Sat Feb 20 2021 01:47:43]
// Generate from:
//   [github.com/gxlb/cli/internal/gp/value.gp]
//   [github.com/gxlb/cli/value.gpg] [value_int_slice]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2021 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Site    : https://github.com/vipally
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////

package cli

import (
	//"encoding/json"
	"fmt"
	"strconv"
	//"strings"
)

////////////////////////////////////////////////////////////////////////////////

// IntSlice wraps []int to satisfy flag.Value
type IntSlice struct {
	slice      []int
	hasBeenSet bool
}

// NewIntSlice makes an *IntSlice with default values
func NewIntSlice(defaults ...int) *IntSlice {
	return &IntSlice{slice: append([]int{}, defaults...)}
}

// TODO: Consistently have specific Set function for Int64 and Float64 ?
// Append directly adds an integer to the list of values
func (s *IntSlice) Append(value ...int) {
	if !s.hasBeenSet {
		s.slice = []int{}
		s.hasBeenSet = true
	}

	s.slice = append(s.slice, value...)
}

// Set parses the value into an integer and appends it to the list of values
func (s *IntSlice) Set(value string) error {
	if !s.hasBeenSet {
		s.slice = []int{}
		s.hasBeenSet = true
	}

	// if strings.HasPrefix(value, slPfx) {
	// 	// Deserializing assumes overwrite
	// 	_ = json.Unmarshal([]byte(strings.Replace(value, slPfx, "", 1)), &s.slice)
	// 	s.hasBeenSet = true
	// 	return nil
	// }

	tmp, err := strconv.ParseInt(value, 0, 64)
	if err != nil {
		return err
	}

	s.slice = append(s.slice, int(tmp))

	return nil
}

// String returns a readable representation of this value (for usage defaults)
func (s *IntSlice) String() string {
	return fmt.Sprintf("%#v", s.slice)
}

// Serialize allows IntSlice to fulfill Serializer
func (s *IntSlice) Serialize() string {
	//TODO:
	// jsonBytes, _ := json.Marshal(s.slice)
	// return fmt.Sprintf("%s%s", slPfx, string(jsonBytes))
	return ""
}

// Value returns the slice of ints set by this flag
func (s *IntSlice) Value() []int {
	return s.slice
}

// Get returns the slice set by this flag
func (s *IntSlice) Get() interface{} {
	return *s
}

// IntValue define a value of type IntSlice
type IntValue struct {
	Value       IntSlice  // The value from ENV of files
	Target      *IntSlice // Target set the outer value pointer
	Default     IntSlice  // Default value
	DefaultText string    // Default value help info
	Enums       []int     // Enumeration of valid values
	Ranges      []int     // [min,max,min,max...] ranges of the valid values
	hasBeenSet  bool
}
