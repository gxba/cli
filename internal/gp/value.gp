//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/vipally/gogp]
// Last update at: [Sat Feb 20 2021 10:12 CST]
// Generate from:
//   [github.com/gxlb/cli/internal/gp/value.gp.go]
//   [github.com/gxlb/cli/internal/gp/value.gpg] [GOGP_REVERSE_value]
//
// Tool [github.com/vipally/gogp] info:
// CopyRight 2021 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Site    : https://github.com/vipally
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

<PACKAGE>

import (
	"flag"

	//#GOGP_IFDEF SLICE_TYPE
	"fmt"
	"strconv"
	//"encoding/json"
	//"strings"
	//#GOGP_ENDIF //SLICE_TYPE
)

//#GOGP_REQUIRE(github.com/gxlb/gogp/lib/fakedef,_)

////////////////////////////////////////////////////////////////////////////////

//#GOGP_IFDEF SLICE_TYPE
// <GLOBAL_NAME_PREFIX>Slice wraps []<VALUE_TYPE> to satisfy flag.Value
type <GLOBAL_NAME_PREFIX>Slice struct {
	slice      []<VALUE_TYPE>
	hasBeenSet bool
}

// New<GLOBAL_NAME_PREFIX>Slice makes an *<GLOBAL_NAME_PREFIX>Slice with default values
func New<GLOBAL_NAME_PREFIX>Slice(defaults ...<VALUE_TYPE>) *<GLOBAL_NAME_PREFIX>Slice {
	return &<GLOBAL_NAME_PREFIX>Slice{slice: append([]<VALUE_TYPE>{}, defaults...)}
}

// clone allocate a copy of self object
func (s *<GLOBAL_NAME_PREFIX>Slice) clone() *<GLOBAL_NAME_PREFIX>Slice {
	n := &<GLOBAL_NAME_PREFIX>Slice{
		slice:      make([]<VALUE_TYPE>, len(s.slice)),
		hasBeenSet: s.hasBeenSet,
	}
	copy(n.slice, s.slice)
	return n
}

// TODO: Consistently have specific Set function for Int64 and Float64 ?
// Append directly adds an integer to the list of values
func (s *<GLOBAL_NAME_PREFIX>Slice) Append(value ...<VALUE_TYPE>) {
	if !s.hasBeenSet {
		s.slice = []<VALUE_TYPE>{}
		s.hasBeenSet = true
	}

	s.slice = append(s.slice, value...)
}

// Set parses the value into an integer and appends it to the list of values
func (s *<GLOBAL_NAME_PREFIX>Slice) Set(value string) error {
	if !s.hasBeenSet {
		s.slice = []<VALUE_TYPE>{}
		s.hasBeenSet = true
	}

	// if strings.HasPrefix(value, slPfx) {
	// 	// Deserializing assumes overwrite
	// 	_ = json.Unmarshal([]byte(strings.Replace(value, slPfx, "", 1)), &s.slice)
	// 	s.hasBeenSet = true
	// 	return nil
	// }

	tmp, err := strconv.ParseInt(value, 0, 64)
	if err != nil {
		return err
	}

	s.slice = append(s.slice, <VALUE_TYPE>(tmp))

	return nil
}

// String returns a readable representation of this value (for usage defaults)
func (s *<GLOBAL_NAME_PREFIX>Slice) String() string {
	return fmt.Sprintf("%#v", s.slice)
}

// Serialize allows <GLOBAL_NAME_PREFIX>Slice to fulfill Serializer
func (s *<GLOBAL_NAME_PREFIX>Slice) Serialize() string {
	//TODO:
	// jsonBytes, _ := json.Marshal(s.slice)
	// return fmt.Sprintf("%s%s", slPfx, string(jsonBytes))
	return ""
}

// Value returns the slice of ints set by this flag
func (s *<GLOBAL_NAME_PREFIX>Slice) Value() []<VALUE_TYPE> {
	return s.slice
}

// Get returns the slice set by this flag
func (s *<GLOBAL_NAME_PREFIX>Slice) Get() interface{} {
	return *s
}

//#GOGP_REPLACE(*<ELEM_TYPE>, *<GLOBAL_NAME_PREFIX>Slice)
//#GOGP_REPLACE(<ELEM_TYPE>, *<GLOBAL_NAME_PREFIX>Slice)

//#GOGP_ELSE //SLICE_TYPE

//#GOGP_REPLACE(<ELEM_TYPE>, <VALUE_TYPE>)

//#GOGP_ENDIF //SLICE_TYPE

// <GLOBAL_NAME_PREFIX>Value define a value of type <ELEM_TYPE>
type <GLOBAL_NAME_PREFIX>Value struct {
	Target      *<ELEM_TYPE>   // Target value pointer outside
	Default     <ELEM_TYPE>    // Default value
	DefaultText string          // Default value in help info
	Enums       []<VALUE_TYPE> // Enumeration of valid values
	Ranges      []<VALUE_TYPE> // [min,max,min,max...] ranges of valid values
	value       <ELEM_TYPE>    // The value from ENV of files
	hasBeenSet  bool
}

func (v *<GLOBAL_NAME_PREFIX>Value) IsSet() bool {
	//#GOGP_IFDEF SLICE_TYPE
	return v.Value.hasBeenSet
	//#GOGP_ELSE
	return v.hasBeenSet
	//#GOGP_ENDIF //SLICE_TYPE
}

func (v *<GLOBAL_NAME_PREFIX>Value) Apply(f *Flag, set *flag.FlagSet) error {
	return nil
}

func (v *<GLOBAL_NAME_PREFIX>Value) String() string {
	return ""
}

