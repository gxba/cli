//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/gxlb/gogp]
// Last update at: [Sat Feb 20 2021 14:56 CST]
// Generate from:
//   [github.com/gxlb/cli/internal/gp/value.gp.go]
//   [github.com/gxlb/cli/internal/gp/value.gpg] [GOGP_REVERSE_value]
//
// Tool [github.com/gxlb/gogp] info:
// CopyRight 2021 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Site    : https://github.com/vipally
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

<PACKAGE>

import (
	"flag"
	"fmt"

	//#GOGP_IFDEF SLICE_TYPE
	"strconv"
	//"encoding/json"
	//"strings"
	//#GOGP_ENDIF //SLICE_TYPE
)

//#GOGP_REQUIRE(github.com/gxlb/gogp/lib/fakedef,_)

//#GOGP_IFDEF SLICE_TYPE
var _ = (*strconv.NumError)(nil) //avoid compile error

// <GLOBAL_NAME_PREFIX>Slice wraps []<VALUE_TYPE> to satisfy flag.Value
type <GLOBAL_NAME_PREFIX>Slice struct {
	slice      []<VALUE_TYPE>
	hasBeenSet bool
}

// New<GLOBAL_NAME_PREFIX>Slice makes an *<GLOBAL_NAME_PREFIX>Slice with default values
func New<GLOBAL_NAME_PREFIX>Slice(defaults ...<VALUE_TYPE>) *<GLOBAL_NAME_PREFIX>Slice {
	return &<GLOBAL_NAME_PREFIX>Slice{slice: append([]<VALUE_TYPE>{}, defaults...)}
}

// clone allocate a copy of self object
func (s *<GLOBAL_NAME_PREFIX>Slice) clone() *<GLOBAL_NAME_PREFIX>Slice {
	n := &<GLOBAL_NAME_PREFIX>Slice{
		slice:      make([]<VALUE_TYPE>, len(s.slice)),
		hasBeenSet: s.hasBeenSet,
	}
	copy(n.slice, s.slice)
	return n
}

// TODO: Consistently have specific Set function for Int64 and Float64 ?
// Append directly adds an integer to the list of values
func (s *<GLOBAL_NAME_PREFIX>Slice) Append(value ...<VALUE_TYPE>) {
	if !s.hasBeenSet {
		s.slice = []<VALUE_TYPE>{}
		s.hasBeenSet = true
	}

	s.slice = append(s.slice, value...)
}

// Set parses the value into an integer and appends it to the list of values
func (s *<GLOBAL_NAME_PREFIX>Slice) Set(value string) error {
	if !s.hasBeenSet {
		s.slice = []<VALUE_TYPE>{}
		s.hasBeenSet = true
	}

	// if strings.HasPrefix(value, slPfx) {
	// 	// Deserializing assumes overwrite
	// 	_ = json.Unmarshal([]byte(strings.Replace(value, slPfx, "", 1)), &s.slice)
	// 	s.hasBeenSet = true
	// 	return nil
	// }

	tmp, err := <REP_PARSE_STRING>(value)
	if err != nil {
		return err
	}

	s.slice = append(s.slice, <VALUE_TYPE>(tmp))

	return nil
}

// String returns a readable representation of this value (for usage defaults)
func (s *<GLOBAL_NAME_PREFIX>Slice) String() string {
	return fmt.Sprintf("%#v", s.slice)
}

// Serialize allows <GLOBAL_NAME_PREFIX>Slice to fulfill Serializer
func (s *<GLOBAL_NAME_PREFIX>Slice) Serialize() string {
	//TODO:
	// jsonBytes, _ := json.Marshal(s.slice)
	// return fmt.Sprintf("%s%s", slPfx, string(jsonBytes))
	return ""
}

// Value returns the slice of ints set by this flag
func (s *<GLOBAL_NAME_PREFIX>Slice) Value() []<VALUE_TYPE> {
	return s.slice
}

// Get returns the slice set by this flag
func (s *<GLOBAL_NAME_PREFIX>Slice) Get() interface{} {
	return *s
}

//#GOGP_REPLACE(*<REP_ELEM_TYPE>, *<GLOBAL_NAME_PREFIX>Slice)
//#GOGP_REPLACE(<REP_ELEM_TYPE>, *<GLOBAL_NAME_PREFIX>Slice)
//#GOGP_REPLACE(<REP_PARSE_STRING>(value), <PARSE_STRING>)

//#GOGP_ELSE //SLICE_TYPE

//#GOGP_REPLACE(GOGPREPSingleValue, values)
//#GOGP_REPLACE(<REP_ELEM_TYPE>, <VALUE_TYPE>)

//#GOGP_ENDIF //SLICE_TYPE

// <GLOBAL_NAME_PREFIX>Value define a value of type <REP_ELEM_TYPE>
type <GLOBAL_NAME_PREFIX>Value struct {
	Target      *<REP_ELEM_TYPE> // Target value pointer outside
	Default     <REP_ELEM_TYPE>  // Default value
	DefaultText string           // Default value in help info
	Enums       []<VALUE_TYPE>  // Enumeration of valid values
	Ranges      []<VALUE_TYPE>  // {[min,max),[min,max),[min...)} ranges of valid values
	value       <REP_ELEM_TYPE>  // The value from ENV of files
	hasBeenSet  bool             // if the value was set
	flag        *Flag            // pointer of owner flag
}

// Init verify and init the value by ower flag
func (v *<GLOBAL_NAME_PREFIX>Value) Init(f *Flag) error {
	v.flag = f
	if l := len(v.Enums); l > maxSliceLen {
		return fmt.Errorf("flag %s.Enums too long: %d/%d", v.flag.logicName, l, maxSliceLen)
	}
	if l := len(v.Ranges); l > maxSliceLen {
		return fmt.Errorf("flag %s.Ranges too long: %d/%d", v.flag.logicName, l, maxSliceLen)
	}
	if err := v.validateValues(v.Default); err != nil {
		return fmt.Errorf("default value invalid: %s", err.Error())
	}
	return nil
}

// IsSet check if value was set
func (v *<GLOBAL_NAME_PREFIX>Value) IsSet() bool {
	//#GOGP_IFDEF SLICE_TYPE
	return v.value.hasBeenSet
	//#GOGP_ELSE
	return v.hasBeenSet
	//#GOGP_ENDIF //SLICE_TYPE
}

// Apply coordinate the value to flagset
func (v *<GLOBAL_NAME_PREFIX>Value) Apply(set *flag.FlagSet) error {
	return nil
}

// String return the value for view
func (v *<GLOBAL_NAME_PREFIX>Value) String() string {
	return ""
}

// ValidateValues verify if all values was valid
func (v *<GLOBAL_NAME_PREFIX>Value) ValidateValues() error {
	return v.validateValues(v.value)
}

// for default value verify
func (v *<GLOBAL_NAME_PREFIX>Value) validateValues(values <REP_ELEM_TYPE>) error {
	//#GOGP_IFDEF SLICE_TYPE
	for _, val := range values.slice {
		if err := v.validValue(val); err != nil {
			return err
		}
	}
	return nil
	//#GOGP_ELSE
	return v.validValue(GOGPREPSingleValue)
	//#GOGP_ENDIF //SLICE_TYPE
}

// check if value if valid for this flag
func (v *<GLOBAL_NAME_PREFIX>Value) validValue(value <VALUE_TYPE>) error {
	f := v.flag
	if len(v.Enums) > 0 {
		found := false
		for _, v := range v.Enums {
			if value == v {
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("flag %s value %v out of Enums: %v", f.logicName, value, v.Enums)
		}
	}
	if len(v.Ranges) > 0 {
		found := false
		for i := 0; i < len(v.Ranges); i++ {
			min := v.Ranges[i]
			max := min
			if i++; i < len(v.Ranges) {
				max = v.Ranges[i]
			}
			if value >= min && value < max {
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("flag %s value %v out of Ranges: %v", f.logicName, value, v.Enums)
		}
	}
	return nil
}

var _ Value = (*<GLOBAL_NAME_PREFIX>Value)(nil) //for interface verification only

