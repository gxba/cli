//#GOGP_IGNORE_BEGIN
///////////////////////////////////////////////////////////////////
//
// !!!!!!!!!!!! NEVER MODIFY THIS FILE MANUALLY !!!!!!!!!!!!
//
// This file was auto-generated by tool [github.com/gxlb/gogp]
// Last update at: [Sun Feb 21 2021 11:15 CST]
// Generate from:
//   [github.com/gxlb/cli/internal/gp/flag.gp.go]
//   [github.com/gxlb/cli/internal/gp/flag.gpg] [GOGP_REVERSE_flag]
//
// Tool [github.com/gxlb/gogp] info:
// CopyRight 2021 @Ally Dale. All rights reserved.
// Author  : Ally Dale(vipally@gmail.com)
// Site    : https://github.com/vipally
// Version : 3.0.0.final
// 
///////////////////////////////////////////////////////////////////
//#GOGP_IGNORE_END

<PACKAGE>

import (
	"flag"
	"fmt"

	//#GOGP_IFDEF SLICE_TYPE
	"encoding/json"
	"strconv"
	"strings"
	//#GOGP_ENDIF //SLICE_TYPE
)

//#GOGP_REQUIRE(github.com/gxlb/gogp/lib/fakedef,_)

//#GOGP_IFDEF SLICE_TYPE
var _ = (*strconv.NumError)(nil) //avoid compile error

// <GLOBAL_NAME_PREFIX>Slice wraps []<VALUE_TYPE> to satisfy flag.Value
type <GLOBAL_NAME_PREFIX>Slice struct {
	slice      []<VALUE_TYPE>
	hasBeenSet bool
}

// New<GLOBAL_NAME_PREFIX>Slice makes an *<GLOBAL_NAME_PREFIX>Slice with default values
func New<GLOBAL_NAME_PREFIX>Slice(defaults ...<VALUE_TYPE>) *<GLOBAL_NAME_PREFIX>Slice {
	return &<GLOBAL_NAME_PREFIX>Slice{
		slice:      append([]<VALUE_TYPE>{}, defaults...),
		hasBeenSet: false,
	}
}

// clone allocate a copy of self object
func (s *<GLOBAL_NAME_PREFIX>Slice) clone() *<GLOBAL_NAME_PREFIX>Slice {
	n := &<GLOBAL_NAME_PREFIX>Slice{
		slice:      make([]<VALUE_TYPE>, len(s.slice)),
		hasBeenSet: s.hasBeenSet,
	}
	copy(n.slice, s.slice)
	return n
}

// Append directly append values to the list of values
func (s *<GLOBAL_NAME_PREFIX>Slice) Append(values ...<VALUE_TYPE>) {
	s.setValues(false, values)
}

// Append directly overite values to the list of values
func (s *<GLOBAL_NAME_PREFIX>Slice) SetValues(values ...<VALUE_TYPE>) {
	s.setValues(true, values)
}

// Append directly adds values to the list of values
func (s *<GLOBAL_NAME_PREFIX>Slice) setValues(overwrite bool, values []<VALUE_TYPE>) {
	if !s.hasBeenSet || overwrite {
		s.Reset()
		s.hasBeenSet = true
	}

	s.slice = append(s.slice, values...)
}

// Set parses the value and appends it to the list of values
func (s *<GLOBAL_NAME_PREFIX>Slice) Set(value string) error {

	if strings.HasPrefix(value, slPfx) {
		// Deserializing assumes overwrite
		_ = json.Unmarshal([]byte(strings.Replace(value, slPfx, "", 1)), &s.slice)
		s.hasBeenSet = true
		return nil
	}

	//accept multi values for slice flags
	for _, val := range flagSplitMultiValues(value) {
		value := strings.TrimSpace(val)
		tmp, err := <REP_PARSE_STRING>(value)
		if err != nil {
			return err
		}

		if !s.hasBeenSet {
			s.slice = []<VALUE_TYPE>{}
			s.hasBeenSet = true
		}

		s.slice = append(s.slice, <VALUE_TYPE>(tmp))
	}

	return nil
}

// Reset clean the last parsed values of this slice
func (s *<GLOBAL_NAME_PREFIX>Slice) Reset() {
	if s.slice == nil {
		s.slice = []<VALUE_TYPE>{}
	} else {
		s.slice = s.slice[:0]
	}
	s.hasBeenSet = false
}

// String returns a readable representation of this value (for usage defaults)
func (s *<GLOBAL_NAME_PREFIX>Slice) String() string {
	return fmt.Sprintf("%#v", s.slice)
}

// Serialize allows <GLOBAL_NAME_PREFIX>Slice to fulfill Serializer
func (s *<GLOBAL_NAME_PREFIX>Slice) Serialize() string {
	jsonBytes, _ := json.Marshal(s.slice)
	return fmt.Sprintf("%s%s", slPfx, string(jsonBytes))
}

// Value returns the slice of ints set by this flag
func (s *<GLOBAL_NAME_PREFIX>Slice) Value() []<VALUE_TYPE> {
	return s.slice
}

// Get returns the slice set by this flag
func (s *<GLOBAL_NAME_PREFIX>Slice) Get() interface{} {
	return *s
}

//#GOGP_REPLACE(*<REP_ELEM_TYPE>, *<GLOBAL_NAME_PREFIX>Slice)
//#GOGP_REPLACE(<REP_ELEM_TYPE>, *<GLOBAL_NAME_PREFIX>Slice)
//#GOGP_REPLACE(<REP_PARSE_STRING>(value), <PARSE_STRING>)
//#GOGP_REPLACE(<REP_SLICE_VALUE>, v.target)
//#GOGP_REPLACE(<REP_RAW_ELEM_TYPE>, <GLOBAL_NAME_PREFIX>Slice)

//#GOGP_ELSE //SLICE_TYPE

//#GOGP_REPLACE(<REP_SINGLE_VALUE>, values)
//#GOGP_REPLACE(<REP_ELEM_TYPE>, <VALUE_TYPE>)
//#GOGP_REPLACE(<REP_RAW_ELEM_TYPE>, <VALUE_TYPE>)

//#GOGP_ENDIF //SLICE_TYPE

// <GLOBAL_NAME_PREFIX>Flag define a value of type <REP_ELEM_TYPE>
type <GLOBAL_NAME_PREFIX>Flag struct {
	//
	//name related area
	//
	LogicName string   // logic name of the flag
	Name      string   // name of the flag
	Aliases   []string // aliases of the flag
	Usage     string   // usage string
	Required  bool     // if required
	Hidden    bool     // hidden this flag
	EnvVars   []string // environment values
	FilePath  string   // file path
	//
	//value related area
	//
	Target      *<REP_ELEM_TYPE> // Target value pointer outside
	Default     <REP_ELEM_TYPE>  // Default value
	DefaultText string           // Default value in help info
	Enums       []<VALUE_TYPE>  // Enumeration of valid values
	Ranges      []<VALUE_TYPE>  // {[min,max),[min,)...} ranges of valid values
	//
	////////////////////////////////////////////////////////////////////////////
	//area for parsing
	target *<REP_ELEM_TYPE> // target value pointer(maybe new(<REP_ELEM_TYPE>) if Target not set)
	info   FlagInfo         // parsed info of this flag
}

// Init verify and init the value by ower flag
func (v *<GLOBAL_NAME_PREFIX>Flag) Init(namegen *NameGenenerator) error {
	v.info.Flag = v
	v.info.EnvVars = v.EnvVars
	v.info.Usage = v.Usage
	v.info.DefaultText = v.DefaultText
	v.info.Required = v.Required
	v.info.Hidden = v.Hidden
	v.info.FilePath = v.FilePath
	v.info.LogicName = logicName(v.LogicName)
	v.info.Name = namegen.GetOrGenName(v.Name)
	v.info.HasBeenSet = false
	v.info.DispName = v.Name
	mergeNames(v.Name, v.Aliases, &v.info.Names)

	if l := len(v.Enums); l > maxSliceLen {
		return fmt.Errorf("flag %s.Enums too long: %d/%d", v.info.DispName, l, maxSliceLen)
	}
	if l := len(v.Ranges); l > 0 {
		if l > maxSliceLen {
			return fmt.Errorf("flag %s.Ranges too long: %d/%d", v.info.DispName, l, maxSliceLen)
		}
		if l%2 != 0 {
			return fmt.Errorf("flag %s.Ranges doesn't match [min,max) pairs: %d", v.info.DispName, l)
		}
		for i := 0; i < l; i += 2 {
			min, max := v.Ranges[i], v.Ranges[i+1]
			if valid := min <= max; !valid {
				return fmt.Errorf("flag %s.Ranges doesn't match [min,max): (%d,%d)", v.info.DispName, min, max)
			}
		}
	}
	if v.Name == "" && v.LogicName == "" {
		return fmt.Errorf("flag missing both Name & LogicName: %v", v)
	}
	if v.Name == "" && len(v.Aliases) > 0 {

	}

	if err := v.validateValues(v.Default); err != nil {
		return fmt.Errorf("default value invalid: %s", err.Error())
	}
	if v.Target != nil {
		v.target = v.Target
	} else {
		//#GOGP_IFDEF SLICE_TYPE
		v.target = New<GLOBAL_NAME_PREFIX>Slice()
		//#GOGP_ELSE
		v.target = new(<REP_RAW_ELEM_TYPE>)
		//#GOGP_ENDIF //SLICE_TYPE
	}
	return nil
}

// IsSet check if value was set
func (v *<GLOBAL_NAME_PREFIX>Flag) IsSet() bool {
	//#GOGP_IFDEF SLICE_TYPE
	return v.target.hasBeenSet
	//#GOGP_ELSE
	return v.info.HasBeenSet
	//#GOGP_ENDIF //SLICE_TYPE
}

// Apply coordinate the value to flagset
func (v *<GLOBAL_NAME_PREFIX>Flag) Apply(set *flag.FlagSet) error {
	return nil
}

// String return the value for view
func (v *<GLOBAL_NAME_PREFIX>Flag) String() string {
	return ""
}

// ValidateValues verify if all values was valid
func (v *<GLOBAL_NAME_PREFIX>Flag) ValidateValues() error {
	//#GOGP_IFDEF SLICE_TYPE
	return v.validateValues(<REP_SLICE_VALUE>)
	//#GOGP_ELSE
	return v.validateValues(*v.target)
	//#GOGP_ENDIF //SLICE_TYPE

}

// Info returns parsed info of this flag
func (v *<GLOBAL_NAME_PREFIX>Flag) Info() *FlagInfo {
	return &v.info
}

// Reset clean the last parsed value of this flag
func (v *<GLOBAL_NAME_PREFIX>Flag) Reset() {
	//#GOGP_IFDEF SLICE_TYPE
	v.target.Reset()
	//#GOGP_ELSE
	var t <REP_ELEM_TYPE>
	*v.target = t
	//#GOGP_ENDIF //SLICE_TYPE
	v.info.HasBeenSet = false
}

// for default value verify
func (v *<GLOBAL_NAME_PREFIX>Flag) validateValues(values <REP_ELEM_TYPE>) error {
	//#GOGP_IFDEF SLICE_TYPE
	for _, val := range values.slice {
		if err := v.validValue(val); err != nil {
			return err
		}
	}
	return nil
	//#GOGP_ELSE
	return v.validValue(<REP_SINGLE_VALUE>)
	//#GOGP_ENDIF //SLICE_TYPE
}

// check if value if valid for this flag
func (v *<GLOBAL_NAME_PREFIX>Flag) validValue(value <VALUE_TYPE>) error {
	f := &v.info
	if len(v.Enums) > 0 {
		found := false
		for _, v := range v.Enums {
			if value == v {
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("flag %s value %v out of Enums: %v", f.LogicName, value, v.Enums)
		}
	}
	if len(v.Ranges) > 0 {
		found := false
		for i := 0; i < len(v.Ranges); i += 2 {
			min, max := v.Ranges[i], v.Ranges[i+1]
			if value >= min && value < max {
				found = true
				break
			}
		}
		if !found {
			return fmt.Errorf("flag %s value %v out of Ranges: %v", f.LogicName, value, v.Enums)
		}
	}
	return nil
}

var _ Flag = (*<GLOBAL_NAME_PREFIX>Flag)(nil) //for interface verification only

